- name: Add repo "root-repo"
  tags:
    - install
    - repo
  community.general.pkg5:
    name:
      - root-repo
    state: latest
  when:
    - not ansible_check_mode

- name: Upgrade all packages
  tags: install
  ansible.builtin.command: pkg upgrade -y
  register: upgrade_status
  changed_when: upgrade_status.rc == 0

- name: Upgrade all packages again
  tags: install
  ansible.builtin.command: pkg upgrade -y
  register: upgrade_status
  changed_when: upgrade_status.rc == 0

- name: Install packages (1 pack)
  tags: install
  ansible.builtin.command: pkg install -y bmon busybox curl dnsutils file git inetutils iperf3 iproute2 gnupg
  register: upgrade_status
  changed_when: upgrade_status.rc == 0

- name: Install packages (2 pack)
  tags: install
  ansible.builtin.command: pkg install -y lftp man mc net-tools nginx nmap openssl python rsync sshpass traceroute vim wget which
  register: upgrade_status
  changed_when: upgrade_status.rc == 0

# - name: Install packages
#   tags: install
#   community.general.pkg5:
#     name:
#       - bmon
#       - busybox
#       - curl
#       - dnsutils
#       - file
#       - git
#       - iperf3
#       - iproute2
#       - lftp
#       - man
#       - mc
#       - nginx
#       - nmap
#       - openssl
#       - python
#       - rsync
#       - sshpass
#       - traceroute
#       - vim
#       - wget
#       - which
#     state: latest
#   when:
#     - not ansible_check_mode
#     - hostname == "m52.pro"

- name: Set password to user
  tags:
    - pass
    - ssh
    - sshd
  ansible.builtin.shell: "echo '{{ PASSWD }}\n{{ PASSWD }}\n' | passwd"
  register: passwd
  changed_when: passwd.rc == 0

- name: Git config email
  tags: git
  community.general.git_config:
    name: user.email
    scope: global
    value: "{{ GIT_EMAIL }}"

- name: Git config name
  tags: git
  community.general.git_config:
    name: user.name
    scope: global
    value: "{{ GIT_NAME }}"

- name: Git config http.postBuffer
  tags: git
  community.general.git_config:
    name: http.postBuffer
    scope: global
    value: 524288000

- name: Git config safe.directory
  tags:
    - git
    - safe
  community.general.git_config:
    name: safe.directory
    scope: global
    value: "{{ item.path }}"
    add_mode: add
  loop:
    - { path: /storage/emulated/0/github/prod }
    - { path: /storage/emulated/0/github/private }
    - { path: /storage/emulated/0/scripts }

- name: Create a directory if it does not exist
  tags:
    - git
    - start
    - tar
    - cron
    - crontab
  ansible.builtin.file:
    path: "{{ item.dir }}"
    force: true
    state: directory
    mode: "{{ item.perm }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  loop:
    - { dir: /storage/emulated/0/github, perm: '0770' }
    - { dir: /storage/emulated/0/scripts/backup, perm: '0770' }
    - { dir: /storage/emulated/0/scripts/termux, perm: '0770' }
    - { dir: /data/data/com.termux/files/usr/var/spool/cron/crontabs, perm: '0700' }

- name: Git clone "prod" (remove .lock file)
  tags: git
  ansible.builtin.file:
    path: /storage/emulated/0/github/prod/*.lock
    state: absent

- name: Git clone "prod"
  tags: git
  ansible.builtin.git:
    repo: https://github.com/oleg-lukianov/prod.git
    dest: /storage/emulated/0/github/prod
    update: true
    force: true
    version: main
  ignore_errors: true

- name: Git clone "private" (remove .lock file)
  tags: git
  ansible.builtin.file:
    path: /storage/emulated/0/github/private/*.lock
    state: absent

- name: Git clone "private"
  tags: git
  ansible.builtin.git:
    repo: git@github.com:oleg-lukianov/private.git
    dest: /storage/emulated/0/github/private
    update: true
    force: true
    version: main
  when: private_mode is true
  ignore_errors: true

- name: Another way to call known_hosts
  tags: git
  ansible.builtin.known_hosts:
    name: "{{ item.name }}"
    key: "{{ item.key }}"
    path: /data/data/com.termux/files/home/.ssh/known_hosts
    state: present
  loop: "{{ ssh_known_hosts }}"

- name: Set authorized key taken from file
  tags: git1
  ansible.posix.authorized_key:
    user: "{{ ansible_user_id }}"
    state: present
    path: /data/data/com.termux/files/home/.ssh/authorized_keys
    key: "{{ item.key }}"
  loop: "{{ authorized_keys }}"

- name: Copy scripts 'termux/'
  tags:
    - start
    - tar
    - scripts
    - bash
  ansible.builtin.copy:
    src: termux/
    dest: /storage/emulated/0/scripts/termux/
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    mode: '0660'

- name: Copy files from template
  tags:
    - bash
    - cron
    - crontab
    - template
    - start1
  ansible.builtin.template:
    src: "termux/{{ item.j2 }}"
    dest: "{{ item.path }}{{ item.name }}"
    mode: "{{ item.mode }}"
  loop:
    - { j2: crontab.j2, name: crontab, path: /storage/emulated/0/scripts/termux/, mode: '0660' }
    - { j2: backup_android_lftp_rsync.conf.j2, name: backup_android_lftp_rsync.conf, path: /storage/emulated/0/github/prod/, mode: '0660' }
    - { j2: github_update.sh.j2, name: github_update.sh, path: /storage/emulated/0/scripts/termux/, mode: '0755' }
    - { j2: manual_aliases.sh.j2, name: manual_aliases.sh, path: /data/data/com.termux/files/usr/etc/profile.d/, mode: '0755' }

- name: Create a symbolic link
  tags:
    - start
    - welcome
    - bash
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    state: link
  loop:
    - { src: /storage/emulated/0/scripts/termux/start.sh, dest: /data/data/com.termux/files/usr/etc/profile.d/start.sh }
    - { src: /storage/emulated/0/github/prod/welcome.sh, dest: /data/data/com.termux/files/usr/etc/profile.d/welcome.sh }

- name: Create a symbolic link for 'a71.pro'
  tags:
    - a71
    - fold6
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
    state: link
  loop:
    - { src: /storage/emulated/0/scripts/welcome_aliases_list.sh, dest: /data/data/com.termux/files/usr/etc/profile.d/welcome_aliases_list.sh }
  when: hostname == "a71.pro" or hostname == "fold6.pro"

- name: Touch a file 'crontab'
  tags:
    - cron
    - crontab
  ansible.builtin.file:
    path: "/data/data/com.termux/files/usr/var/spool/cron/crontabs/{{ ansible_user_id }}"
    state: touch
    mode: u=rw,g=r,o=r

- name: Crontab turn on
  tags:
    - cron
    - crontab
  ansible.builtin.command: busybox crontab /storage/emulated/0/scripts/termux/crontab
  register: crontab_status
  changed_when: crontab_status.rc == 0
